// Generated by CoffeeScript 1.9.3
var App, Controls, TerrainManager, me,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Controls = (function() {
  Controls.SPEED = 1;

  Controls.FORWARD = new THREE.Vector2(0, 1);

  Controls.BACK = new THREE.Vector2(0, -1);

  Controls.LEFT = new THREE.Vector2(1, 0);

  Controls.RIGHT = new THREE.Vector2(-1, 0);

  Controls.prototype.isForward = false;

  Controls.prototype.isBack = false;

  Controls.prototype.isLeft = false;

  Controls.prototype.isRight = false;

  function Controls() {
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    document.body.addEventListener('keydown', this.onDown, false);
    document.body.addEventListener('keyup', this.onUp, false);
    this.position = new THREE.Vector2();
  }

  Controls.prototype.addGui = function(folder) {
    var f;
    f = folder.addFolder('Controls');
    f.add(Controls, 'SPEED', 1, 20).step(1);
    return null;
  };

  Controls.prototype.onDown = function(e) {
    if (e.keyCode === 87) {
      this.isForward = true;
    }
    if (e.keyCode === 65) {
      this.isBack = true;
    }
    if (e.keyCode === 68) {
      this.isLeft = true;
    }
    if (e.keyCode === 83) {
      this.isRight = true;
    }
    return null;
  };

  Controls.prototype.onUp = function(e) {
    if (e.keyCode === 87) {
      this.isForward = false;
    }
    if (e.keyCode === 65) {
      this.isBack = false;
    }
    if (e.keyCode === 68) {
      this.isLeft = false;
    }
    if (e.keyCode === 83) {
      this.isRight = false;
    }
    return null;
  };

  Controls.prototype.update = function() {
    Controls.FORWARD.normalize();
    Controls.LEFT.normalize();
    Controls.RIGHT.normalize();
    Controls.BACK.normalize();
    Controls.FORWARD.multiplyScalar(Controls.SPEED);
    Controls.LEFT.multiplyScalar(Controls.SPEED);
    Controls.RIGHT.multiplyScalar(Controls.SPEED);
    Controls.BACK.multiplyScalar(Controls.SPEED);
    if (this.isForward === true) {
      this.position.add(Controls.FORWARD);
    }
    if (this.isBack === true) {
      this.position.add(Controls.LEFT);
    }
    if (this.isLeft === true) {
      this.position.add(Controls.RIGHT);
    }
    if (this.isRight === true) {
      this.position.add(Controls.BACK);
    }
    return null;
  };

  return Controls;

})();

TerrainManager = (function() {
  TerrainManager.prototype.sizeW = 20;

  TerrainManager.prototype.sizeH = 20;

  TerrainManager.prototype.tileW = 100;

  TerrainManager.prototype.tileH = 100;

  TerrainManager.prototype._initialX = 0;

  TerrainManager.prototype._initialZ = 0;

  function TerrainManager() {
    this.rebuild = bind(this.rebuild, this);
    this.group = new THREE.Group();
    this.build();
  }

  TerrainManager.prototype.addGui = function(folder) {
    var f;
    f = folder.addFolder('TerrainManager');
    f.add(this, 'sizeW', 1, 20).step(1).onChange(this.rebuild);
    f.add(this, 'sizeH', 1, 20).step(1).onChange(this.rebuild);
    f.add(this, 'tileW', 100, 500).step(1).onChange(this.rebuild);
    return f.add(this, 'tileH', 100, 500).step(1).onChange(this.rebuild);
  };

  TerrainManager.prototype.destroy = function() {
    while (this.group.children.length > 0) {
      this.group.remove(this.group.children[0]);
    }
    return null;
  };

  TerrainManager.prototype.build = function() {
    var detailLevel, detailStep, geometry, i, j, k, l, lod, material, mesh, ref, ref1, ref2, x, z;
    this._initialX = (this.sizeW * this.tileW) / -2;
    this._initialX += this.tileW / 2;
    this._initialZ = (this.sizeH * this.tileH) / -1.1;
    this._initialZ += this.tileH / 2;
    detailLevel = Math.max(this.sizeW, this.sizeH);
    detailLevel /= 2;
    detailStep = Math.max(this.tileW, this.tileH);
    detailLevel /= 2;
    for (x = j = 0, ref = this.sizeW; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
      for (z = k = 0, ref1 = this.sizeH; 0 <= ref1 ? k < ref1 : k > ref1; z = 0 <= ref1 ? ++k : --k) {
        lod = new THREE.LOD();
        material = new THREE.MeshBasicMaterial({
          color: 0xffffff * Math.random(),
          wireframe: true
        });
        for (i = l = 0, ref2 = detailLevel; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
          geometry = new THREE.PlaneGeometry(this.tileW, this.tileH, detailLevel - i, detailLevel - i);
          mesh = new THREE.Mesh(geometry, material);
          lod.addLevel(mesh, i * detailStep);
        }
        lod.rotation.x = -90 * Math.PI / 180;
        this.group.add(lod);
      }
    }
    return null;
  };

  TerrainManager.prototype.update = function(vec2) {
    var c, j, k, ref, ref1, tile, x, z;
    c = 0;
    for (x = j = 0, ref = this.sizeW; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
      for (z = k = 0, ref1 = this.sizeH; 0 <= ref1 ? k < ref1 : k > ref1; z = 0 <= ref1 ? ++k : --k) {
        tile = this.group.children[c];
        tile.position.x = this._initialX + this.mod((x * this.tileW) + vec2.x, this.sizeW * this.tileW);
        tile.position.z = this._initialZ + this.mod((z * this.tileH) + vec2.y, this.sizeH * this.tileH);
        c++;
      }
    }
    return null;
  };

  TerrainManager.prototype.mod = function(m, n) {
    return ((m % n) + n) % n;
  };

  TerrainManager.prototype.rebuild = function() {
    this.destroy();
    this.build();
    return null;
  };

  return TerrainManager;

})();

App = (function() {
  App.prototype.fov = 55;

  App.prototype.near = 1;

  App.prototype.far = 10000;

  function App() {
    this.update = bind(this.update, this);
    this.onResize = bind(this.onResize, this);
    this.scene = new THREE.Scene();
    this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);
    this.camera.position.y = 50;
    this.camera.position.z = 150;
    this.camera.lookAt(new THREE.Vector3(0, 0, -250));
    this.playerCamera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);
    this.playerCamera.lookAt(this.scene.position);
    this.orbitControls = new THREE.OrbitControls(this.camera);
    this.orbitControls.minDistance = 50;
    this.orbitControls.maxDistance = 1000;
    this.orbitControls.noPan = true;
    this.orbitControls.noKeys = true;
    this.orbitControls.maxPolarAngle = 87 * Math.PI / 180;
    this.renderer = new THREE.WebGLRenderer({
      antialias: true,
      alpha: false
    });
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.renderer.sortObjects = false;
    document.body.appendChild(this.renderer.domElement);
    window.addEventListener('resize', this.onResize, false);
    this.addLights();
    this.initPass();
    this.onResize();
    this.init();
    this.update();
  }

  App.prototype.addLights = function() {
    this.ambient = new THREE.AmbientLight(0x444444);
    this.scene.add(this.ambient);
    this.light = new THREE.SpotLight(0xaaaaaa, 1, 0, Math.PI / 2, 1);
    this.light.position.set(0, 1500, 1000);
    this.light.target.position.set(0, 0, 0);
    this.scene.add(this.light);
    return null;
  };

  App.prototype.initPass = function() {
    this.composer = new WAGNER.Composer(this.renderer, {
      useRGBA: false
    });
    this.bloomPass = new WAGNER.MultiPassBloomPass();
    this.bloomPass.params.blurAmount = 0;
    this.bloomPass.params.applyZoomBlur = false;
    this.bloomPass.params.zoomBlurStrength = 0;
    this.gui = new dat.GUI();
    this.gui.domElement.style.marginRight = '100px';
    return null;
  };

  App.prototype.init = function() {
    var player;
    player = new THREE.Mesh(new THREE.OctahedronGeometry(5, 0), new THREE.MeshBasicMaterial({
      color: 0x00ffff,
      wireframe: true
    }));
    player.position.y = 5;
    this.scene.add(player);
    this.controls = new Controls();
    this.controls.addGui(this.gui);
    this.terrain = new TerrainManager();
    this.terrain.addGui(this.gui);
    this.scene.add(this.terrain.group);
    return null;
  };

  App.prototype.onResize = function() {
    var h, w;
    w = window.innerWidth;
    h = window.innerHeight;
    this.renderer.setSize(w, h);
    this.camera.projectionMatrix.makePerspective(this.fov, w / h, this.near, this.far);
    this.resizePass();
    return null;
  };

  App.prototype.resizePass = function() {
    this.composer.setSize(this.renderer.domElement.width, this.renderer.domElement.height);
    this.bloomPass.params.zoomBlurCenter.set(.5 * this.composer.width, .5 * this.composer.height);
    this.glowTexture = WAGNER.Pass.prototype.getOfflineTexture(this.composer.width, this.composer.height, false);
    return null;
  };

  App.prototype.update = function() {
    requestAnimationFrame(this.update);
    this.controls.update();
    this.terrain.update(this.controls.position);
    this.playerCamera.position.copy(this.controls.position);
    this.scene.traverse((function(_this) {
      return function(object) {
        if (object instanceof THREE.LOD) {
          return object.update(_this.playerCamera);
        }
      };
    })(this));
    this.renderPass();
    return null;
  };

  App.prototype.renderPass = function() {
    this.composer.reset();
    if (this.bloomPass.params.useTexture) {
      this.scene.overrideMaterial = this.glowMaterial;
      this.composer.render(this.scene, this.camera, null, this.glowTexture);
      this.scene.overrideMaterial = null;
      this.composer.render(this.scene, this.camera);
      this.bloomPass.params.glowTexture = this.glowTexture;
    } else {
      this.composer.render(this.scene, this.camera);
    }
    this.composer.pass(this.bloomPass);
    this.composer.toScreen();
    return null;
  };

  return App;

})();

(me = function() {
  var args;
  args = ['\n %c kickjs %c kickjs threejstemplate \n\n', 'background: #1A1A1A; color: #00ffff; font-size: x-large;', 'background: #00ffff; color: #1A1A1A; font-size: x-large;'];
  window.app = new App();
  return null;
})();
